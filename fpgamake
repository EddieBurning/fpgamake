#!/usr/bin/python

## Copyright (c) 2014 Quanta Research Cambridge, Inc.

## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation
## files (the "Software"), to deal in the Software without
## restriction, including without limitation the rights to use, copy,
## modify, merge, publish, distribute, sublicense, and/or sell copies
## of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:

## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.

## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
## BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
## ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
## CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.

import os
import sys
import re
import glob
import shutil
import argparse
import subprocess

description='''
Generates Makefiles to synthesize, place, and route verilog.

Each module specified will be synthesized into a separate design
checkpoint.

If a floorplan is provided, each instance of the synthesized modules
will be separately placed and routed and then combined into the top
level design.
'''

argparser = argparse.ArgumentParser(description=description)
argparser.add_argument('vpath', help='Verilog path', nargs='+')
argparser.add_argument('--header', help='Verilog defines', default=[], action='append')
argparser.add_argument('-o', '--output', help='Output make file', default='synth.mk')
argparser.add_argument('-s', '--synth', help='Module to synthesize separately', default=[], action='append')
argparser.add_argument('--xci', help='XCI file to use', default=[], action='append')
argparser.add_argument('--xdc', help='XDC file to use', default=[], action='append')
argparser.add_argument('--floorplan', help='Floorplan XDC.', default=None)
argparser.add_argument('-t', '--top', help='Top verilog file')
argparser.add_argument('-b', '--bitfile', help='Bit file to generate', default=None)
argparser.add_argument('--cachedir', help='Cache directory', default='Cache')
argparser.add_argument('-v', '--verbose', help='Verbose operation', action='store_true', default=False)
argparser.add_argument('--debug', help='Debug operation', action='store_true', default=True)

module_instances={}
modules_used={}
modules_visited={}
verilog_used={}
xdc_files={}

parameterizedModuleRe = r'^\s*(\w+)\s*#'
plainModuleRe = r'^\s*(\w+)\s+(\w+)\s*\(?'

verilog_keywords = ['assign', 'input', 'output', 'parameter', 'reg', 'wire', 'if', 'else']

def find_in_path(fname, path):
    (basename,ext) = os.path.splitext(fname)
    print basename, ext
    extensions = ['.v', '.vhd', '.vhdl']
    if len(ext)>0:
        extensions = [ext]
    for ext in extensions:
        fname = basename + ext
        for p in path:
            if os.path.exists(os.path.join(p, fname)):
                return os.path.join(p, fname)
            if os.path.exists(os.path.join(p, fname.upper())):
                return os.path.join(p, fname.upper())
            if os.path.exists(os.path.join(p, fname.lower())):
                return os.path.join(p, fname.lower())
    return None

def scan_module(module, parent_partition=None, parent_module=None):
    if options.verbose:
        print 'scanning module %s ====================' % module
    vpath = find_in_path(module, options.vpath)
    modules_visited[module] = vpath
    if not parent_partition:
        parent_partition = module
    submodules=[]
    if not vpath or not os.path.exists(vpath):
        return
    vlist = [vpath]
    vseen = []
    while True:
        if vlist == []:
            break
        vpath = vlist.pop()
        if vpath in vseen:
            continue
        vseen.append(vpath)
        if options.debug:
            print 'scanning', vpath
        for line in open(vpath):
            m = re.match(plainModuleRe, line)
            m2 = re.match(parameterizedModuleRe, line)
            if m:
                submodule=m.group(1)
                if submodule in verilog_keywords:
                    continue
                print 'found submodule', m.group(1), m.group(2)
                submodules.append(submodule)
                inst=m.group(2)
                if submodule in options.synth:
                    if options.verbose:
                        print 'separate synth', submodule, inst
                    if module_instances.has_key(submodule):
                        module_instances[submodule].append(inst)
                    else:
                        module_instances[submodule] = [inst]
                    if modules_used.has_key(parent_partition):
                        modules_used[parent_partition].append(submodule)
                    else:
                        modules_used[parent_partition] = [submodule]
                else:
                    submodulepath=find_in_path(submodule, options.vpath)
                    if submodulepath and os.path.exists(submodulepath):
                        vlist.append(submodulepath)
                        if verilog_used.has_key(parent_partition):
                            verilog_used[parent_partition].append(submodule)
                        else:
                            verilog_used[parent_partition] = [submodule]
                    elif options.verbose:
                        print 'fpgamake: could not find module in path', submodule, options.vpath, submodulepath
            elif m2:
                submodule = m2.group(1)
                if submodule in verilog_keywords:
                    continue
                print 'found submodule', m2.group(1)
                submodules.append(submodule)
                submodulepath=find_in_path(submodule, options.vpath)
                if submodulepath:
                    vlist.append(submodulepath)
                    if verilog_used.has_key(parent_partition):
                        verilog_used[parent_partition].append(submodule)
                    else:
                        verilog_used[parent_partition] = [submodule]

def process_modules():
    for module in module_instances:
        vfile = '%s.v' % module
        vpath = find_in_path(module, options.vpath)
        if options.debug:
            print module, vpath
        synthdir = os.path.join('Synth', module)
        if not os.path.isdir(synthdir):
            os.makedirs(synthdir)
        shutil.copyfile(vpath, os.path.join(synthdir, vfile))

        stubpath = 'Synth/stubs/%s-stub.v' % module
        make_stub(vpath, stubpath)

def make_stub(vpath, stubpath):
    stubdir = os.path.dirname(stubpath)
    if not os.path.isdir(stubdir):
        os.makedirs(stubdir)
    f = open(stubpath, 'w')
    for line in open(vpath):
        m = re.match('^\s*module ', line)
        if m:
            f.write("(*black_box*)")
        f.write(line)
    f.close()

makefileHeaderTemplate='''

TCLDIR=%(fpgamakedir)s/tcl
BUILDCACHE=%(buildcachedir)s
CACHEDIR = %(cachedir)s
FLOORPLAN=%(floorplan)s

include $(TCLDIR)/Makefile.fpgamake.common
'''

makefileTrailerTemplate='''
everything: $(SYNTH_NETLISTS) %(bitfile)s

'''

synth_template='''
%(module)s_HEADERFILES = %(headerfiles)s
%(module)s_VFILES = %(vfiles)s
%(module)s_STUBS = %(module_stubs)s
%(module)s_IP = %(xcifiles)s
%(module)s_SUBINST = %(subinst)s
%(module)s_PATH = %(module_path)s

$(eval $(call SYNTH_RULE,%(module)s))
'''

impl_template='''
%(inst)s_XDC = %(xdc_files)s
%(inst)s_OOCXDC = %(oocxdc)s
%(inst)s_NETLISTS = %(module_routed_netlists)s
%(inst)s_BITFILE = %(bitfile)s

$(eval $(call IMPL_RULE,%(inst)s,%(module)s))
'''

topdown_template='''
TopDown_XDC = %(xdc_files)s
TopDown_NETLISTS = %(module_synth_netlists)s
TopDown_SUBINST = %(subinst)s

$(eval $(call TOP_RULE,%(inst)s,%(module)s,%(bitfile)s,%(bitbase)s))
'''

def write_makefile():
    f = open(options.output, 'w')
    f.write(makefileHeaderTemplate % { 'floorplan': os.path.abspath(options.floorplan) if options.floorplan else '',
                                       'fpgamakedir': fpgamakedir,
                                       'buildcachedir': os.path.abspath(os.path.join(fpgamakedir, '../buildcache/buildcache')) if options.cachedir else '',
                                       'cachedir': os.path.abspath(options.cachedir) if options.cachedir else ''
                                       })
    for module in module_instances:
        subinst = []
        module_stubs = []
        if options.top in modules_used:
            subinst = ([' '.join(module_instances[submodule]) for submodule in set(modules_used[options.top])])
        if module in modules_used:
            module_stubs = ['%s-stub.v' % (m) for m in set(modules_used[module])]
        f.write(synth_template % { 'module': module,
                                   'module_path': find_in_path(module, options.vpath),
                                   'headerfiles': ' '.join([find_in_path(vfile, options.vpath) for vfile in set(options.header)]) if options.header else '',
                                   'vfiles': ' '.join([find_in_path(module, options.vpath)]
                                                      + [find_in_path(vfile, options.vpath) for vfile in set(verilog_used[module])]
                                                      ) if module in verilog_used else '',
                                   'subinst': ' '.join(subinst),
                                   'module_stubs': ' '.join(module_stubs),
                                   'xcifiles': ' '.join(options.xci),
                                   })
        for inst in set(module_instances[module]):
            subinst_routed_netlists = []
            if module in modules_used:
                for submodule in set(modules_used[module]):
                    if options.verbose:
                        print 'inst', inst, 'submodule', submodule
                    for subinst in module_instances[submodule]:
                        if options.verbose:
                            print '\t', subinst
                        subinst_routed_netlists.append('Impl/%s/%s-post-route.dcp' % (subinst, subinst))

            f.write(impl_template % { 'module': module,
                                      'inst': inst,
                                      'xdc_files': ' '.join([os.path.abspath(xdc) for xdc in xdc_files[inst]]) if inst in xdc_files else '',
                                      'module_routed_netlists': ' '.join(subinst_routed_netlists),
                                      'oocxdc': '%(inst)s-ooc.xdc %(inst)s-ooc-clocks.xdc %(inst)s-ooc-budget.xdc' % {'inst': inst} if inst != 'top' else '',
                                      'bitfile': options.bitfile if (inst == 'top' and options.bitfile) else '',
                                      })

    submodule_synth_netlists = []
    if options.top in modules_used:
        for submodule in modules_used[options.top]:
            submodule_synth_netlists.append('Synth/%s/%s-synth.dcp' % (submodule, submodule))

    inst = 'top'
    topdown_xdc_files = (' '.join([os.path.abspath(xdc) for xdc in xdc_files[inst]]) if (inst in xdc_files) else '')

    submodules = []
    if options.top in modules_used:
        submodules = set(modules_used[options.top])
    f.write(topdown_template % { 'module': options.top,
                                 'inst': inst,
                                 'subinst': ' '.join([' '.join(module_instances[submodule]) for submodule in submodules]),
                                 'oocxdc': ' '.join([' '.join(['Impl/%(inst)s/%(inst)s-ooc-clocks.xdc Impl/%(inst)s/%(inst)s-ooc.xdc'
                                                               % {'inst': inst}
                                                               for inst in module_instances[submodule]])
                                                     for submodule in submodules]),
                                 'xdc_files': topdown_xdc_files,
                                 'floorplan': os.path.abspath(options.floorplan) if options.floorplan else '',
                                 'module_synth_netlists': ' '.join(submodule_synth_netlists),
                                 'bitfile': options.bitfile if options.bitfile else '',
                                 'bitbase': os.path.splitext(options.bitfile)[0] if options.bitfile else '',
            })
    f.write(makefileTrailerTemplate % { 'bitfile': options.bitfile if options.bitfile else '' })
    f.close()

def expand_path():
    visitlist=[] + options.vpath
    while visitlist:
        d = visitlist.pop()
        print 'visiting', d
        for f in glob.glob(os.path.join(d, '*')):
            if os.path.isdir(f) and not f in options.vpath:
                print 'subdir', f
                options.vpath.append(f)
                visitlist.append(f)

if __name__=='__main__':
    exename = os.path.abspath(sys.argv[0])
    fpgamakedir = os.path.dirname(exename)
    options = argparser.parse_args()
    expand_path()
    module_instances[options.top] = ['top']
    scan_module(options.top)
    for m in options.synth:
        scan_module(m)
    if options.verbose:
        print module_instances
        print modules_used
        print 'verilog_used'
        print verilog_used

    xdc_files['top'] = options.xdc
    process_modules()
    write_makefile()
